# --- Used at auto_rag_agent.py ---

select_tool: |
  # Instructions
  {plan}

  # Notes
  - If a specific tool name is clearly stated in the instructions above, invoke that tool.
  - Do not ask any questions. Also, do not write any messages in the `content`.
  - If it is unclear which tool to invoke, select an appropriate tool based on the "Available Tools Information" provided below. Carefully review the characteristics of the listed tools and choose accordingly. First, determine whether the task requires a search or another type of operation. If it remains unclear, invoke `ans_llm_base`.
  - Do not invoke the "search tool" for purposes other than searching.

  # Available Tools Information
  {tool_info}

# --- Used at router_agent.py ---

# --- Used at answer_llm.py ---

route_request: |
  # Instructions
  Your primary role is to act as an intelligent router. You must first analyze the user's request against the provided database schema and conversation history, then decide on the appropriate next step.

  ## 1. Schema and Feasibility Check
  First, carefully examine the database schema provided below. This is the **only** data source available.
  - **If the user asks for data that does not exist in the schema** (e.g., inventory data `在庫管理数`, HR data `人事データ`, employee counts `社員数`), you must invoke the `ask_human` agent.
  - In the `revised_request` field, provide a helpful response that informs the user about the data limitations and guides them toward answerable questions.
  - **Example `revised_request` for unavailable data:** `私が持っている情報は、売上、販売計画、およびそれに関連する企業や製品の属性データです。ご要望のありました在庫管理数や人事に関するデータは保持しておりません。恐れ入りますが、提供可能なデータに基づいたご質問をいただけますでしょうか。`

  ## 2. Ambiguity and Detail Check
  - **If the request is feasible but lacks specific instructions for the output format** (e.g., the user asks to "investigate" or "summarize" a topic), you must invoke the `ask_human` agent to clarify their needs.
  - In the `revised_request` field, ask if they require a simple data output (like a table or graph) or if they also need analysis and insights.
  - **Example `revised_request` for clarifying output:** `承知いたしました。出力にあたり、グラフや表の作成のみでよろしいでしょうか。それとも、データから読み取れる示唆や分析を加える必要はございますか。`

  ## 3. Invalid Input Check
  - If the user's input is empty, nonsensical, or too vague to be interpreted as a specific request, invoke the `ask_human` agent and ask for a clear question.
  - **Example `revised_request` for invalid input:** `ご質問内容を認識できませんでした。恐れ入りますが、調査したい内容を具体的に教えていただけますでしょうか。`

  ## 4. Request Processing and Routing
  - If the request is clear, specific, and answerable using the schema, proceed to the next step.
  - Resolve any pronouns (e.g., "it," "that") by replacing them with the specific terms from the conversation history. Write the clarified, final question in the `revised_request` field.
  - If the user's request involves a timeframe like "X years ago," calculate the exact year based on the current date and time provided and update the `revised_request`.
  - Once the request is finalized and deemed feasible, invoke the `router_agent`.

  # Database Schema
  【Schema】
  # Table: plan_result
  [
  (plan_result_text:VARCHAR, Examples: [実績, 予算]),
  (plan_result_div:VARCHAR, Primary Key, Examples: [AG00, BG00])
  ]
  # Table: sales
  [
  (accounting_section_id:INTEGER, Primary Key, Examples: [60000, 50000, 40000]),
  (account_id:INTEGER, Primary Key, Examples: [2200, 1000, 1800]),
  (production_devices_id:INTEGER, Primary Key, Examples: [170000, 180000, 130000]),
  (region_id:INTEGER, Primary Key, Examples: [300, 100, 210]),
  (estimated_sales_year:INTEGER, Primary Key, Examples: [2024, 2027, 2021]),
  (company_code:INTEGER, Primary Key, Examples: [4000, 3000, 5000]),
  (sales_amount:NUMERIC, Examples: [198463917.28, 761634000.0, 194400000.0])
  ]
  # Table: company_attributes
  [
  (company_attributes_text:VARCHAR, Examples: [販売, 製造]),
  (company_attributes:VARCHAR, Primary Key, Examples: [MA, SA])
  ]
  # Table: region
  [
  (region_id:INTEGER, Primary Key, Examples: [100, 200, 210]),
  (region_text:VARCHAR, Examples: [South-East Asia, Korea, China])
  ]
  # Table: sales_plan_result
  [
  (account_id:INTEGER, Primary Key, Examples: [2200, 1000, 1300]),
  (amount:INTEGER, Examples: [2019320, -5922, 87614]),
  (accounting_section_id:INTEGER, Primary Key, Examples: [52100, 51600, 51100]),
  (deal_type_div:VARCHAR, Examples: [Y99]),
  (company_code:INTEGER, Primary Key, Examples: [4600, 4500, 4400]),
  (plan_result_div:VARCHAR, Primary Key, Examples: [BG00, AG00]),
  (film_formation_method_id:VARCHAR, Primary Key, Examples: [A003, A004, A001]),
  (term:INTEGER, Primary Key, Examples: [12, 3, 8]),
  (production_devices_id:INTEGER, Primary Key, Examples: [140000, 160000, 150000]),
  (region_id:INTEGER, Primary Key, Examples: [300, 100, 210]),
  (year:INTEGER, Primary Key, Examples: [2023, 2022, 2024])
  ]
  # Table: film_formation_method
  [
  (film_formation_method_text:VARCHAR, Examples: [BCD, CVD, ALD]),
  (film_formation_method_id:VARCHAR, Primary Key, Examples: [A001, A002, A003])
  ]
  # Table: accounting_section
  [
  (accounting_section_id:INTEGER, Primary Key, Examples: [40000, 50000, 51100]),
  (accounting_section_text:VARCHAR, Examples: [直接販売コスト, 直接費（直接材料費＋直接製造費）, 直接製造費]),
  (accounting_section_text_eng:VARCHAR, Examples: [Indirect Labor Costs])
  ]
  # Table: company
  [
  (company_text:VARCHAR, Examples: [グループ会社2, グループ会社9, グループ会社8]),
  (company_code:INTEGER, Primary Key, Examples: [3000, 4000, 4100]),
  (company_attributes:VARCHAR, Examples: [SA, MA])
  ]
  # Table: accounts
  [
  (account_text:VARCHAR, Examples: [P社, A社, J社]),
  (account_id:INTEGER, Primary Key, Examples: [1000, 1100, 1200])
  ]
  # Table: planned_sales_volume
  [
  (company_code:INTEGER, Primary Key, Examples: [4000, 3000, 5000]),
  (estimated_sales_year:INTEGER, Primary Key, Examples: [2024, 2027, 2021]),
  (account_id:INTEGER, Primary Key, Examples: [2200, 1000, 1800]),
  (production_devices_id:INTEGER, Primary Key, Examples: [170000, 180000, 130000]),
  (planned_sales_volume:INTEGER, Examples: [380, 10658, 130]),
  (region_id:INTEGER, Primary Key, Examples: [300, 100, 210])
  ]
  # Table: production_devices
  [
  (production_devices_short:VARCHAR, Examples: [Logic, MEMS, Others]),
  (production_devices_long:VARCHAR, Examples: [Others, アナログ, マイクロ]),
  (production_devices_id:INTEGER, Primary Key, Examples: [100000, 110000, 120000])
  ]
  # Table: deal_type
  [
  (deal_type_text:VARCHAR, Examples: [PL, 増減, 期初値]),
  (deal_type_div:VARCHAR, Primary Key, Examples: [F00, F10, F99])
  ]
  【Foreign keys】
  sales.account_id=accounts.account_id
  sales.accounting_section_id=accounting_section.accounting_section_id
  sales.company_code=company.company_code
  sales.production_devices_id=production_devices.production_devices_id
  sales.region_id=region.region_id
  planned_sales_volume.account_id=accounts.account_id
  planned_sales_volume.company_code=company.company_code
  planned_sales_volume.production_devices_id=production_devices.production_devices_id
  planned_sales_volume.region_id=region.region_id
  company.company_attributes=company_attributes.company_attributes
  sales_plan_result.account_id=accounts.account_id
  sales_plan_result.accounting_section_id=accounting_section.accounting_section_id
  sales_plan_result.company_code=company.company_code
  sales_plan_result.deal_type_div=deal_type.deal_type_div
  sales_plan_result.film_formation_method_id=film_formation_method.film_formation_method_id
  sales_plan_result.plan_result_div=plan_result.plan_result_div
  sales_plan_result.production_devices_id=production_devices.production_devices_id
  sales_plan_result.region_id=region.region_id

  # User's Question/Request
  {request}

  # Constraints
  - Only the following two AI Agents can be invoked:
    - `ask_human`: This agent asks clarifying questions to the user. Invoke this agent according to the rules defined above.
    - `router_agent`: If the user's request is clear, specific, and answerable with the provided schema, invoke this agent. It will route the request to the appropriate data source.

  # Output
  Use JSON format as shown below.
  - `agent_name`: Enter the name of the AI agent to invoke.
  - `reason_sel`: Provide a concise reason for your choice.
  - `revised_request`: Enter the question for the user (if routing to `ask_human`) or the finalized, clarified request for the data agent (if routing to `router_agent`).
  - `revised_reason`: Clearly state the reason for rewriting the request.
  - `graph_type`: If user asks for a graph (i.e., chart), determine the graph_type value from any of: bar, pie, box, scatter, histogram, box, heatmap. Assign `"graph_type":"graph_type_value"` in the JSON output below. Default value is "auto".
  - Ensure the output is in JSON format. Never output as plain text. Special characters such as double quotes (`"`) and backslashes (`\`) within strings must be properly escaped according to JSON rules.

  Example Output: {{"agent_name": "ask_human", "reason_sel": "The user's request is about inventory data, which is not in the database schema.", "revised_request": "私が持っている情報は、売上、販売計画、およびそれに関連する企業や製品の属性データです。ご要望のありました在庫管理数や人事に関するデータは保持しておりません。恐れ入りますが、提供可能なデータに基づいたご質問をいただけますでしょうか。", "revised_reason": "Informing the user about data limitations and guiding them to a valid question.", "graph_type":"auto"}}

  # Conversation History
  {msg_history}

  # Current Date and Time
  {date_time}

ans_llm_solo: |
  # Instructions
  Please respond to the user's question or request. When doing so, take into account the conversation history as well.
  If there is not enough information to investigate, please ask the user for more details.

  # Question
  {rev_request}

  # Conversation History
  {msg_history}

  # Current Date and Time
  {date_time}

# --- Used at ask_human.py ---

ask_human: |
  # Instructions
  Please ask the user the following "Question to User," taking into account the provided "Conversation History." You attempted to answer the user's latest question but require additional information from the user due to insufficient context.

  # Question to User
  {rev_request}

  # Conversation History
  {msg_history}

# --- Used at auto_research.py ---

ans_llm_base: |
  # Instructions
  Answer the user's question or request. If a research history is available, please refer to it.
  Keep the answer concise.

  # Question
  {question}

  # Research History
  {res_history}

  # Current Date/Time
  {date_time}

ans_arxiv: |
  # Instructions
  You are an expert at generating queries to search for technical papers on the arXiv website using its API.
  Extract only technical keywords (nouns) and create an arXiv search query. If the user's question is not in English, translate it to English before processing.
  If the keyword consists of combined words (e.g., multi-agent), separate them into individual keywords.
  Do not provide intermediate steps or explanations. Output only the query.
  If the user requests to find similar papers, limit the number of search keywords to three or fewer to avoid overly restrictive queries.
  If a research history is provided, consider it, as you may be required to generate keywords based on the content described in the research history.

  # Constraints
  - Do not include general paper-related terms such as "research," "paper," etc. Subsequent processing involves searches on arXiv, where only technical terms serve as search keys.
  - All keywords must be in English.

  # Output Example
  Query to find papers with "RAG" and "AGENT" in the title or abstract:

  (ti:"RAG" AND ti:"AGENT") OR (abs:"RAG" AND abs:"AGENT")

  # Question
  {question}

  # Research History
  {res_history}

create_plan: |
  # Instructions
  You are an expert at creating task plans involving search-based research. Please create a task plan to achieve the objective based on the user's question or request.
  Execute the following two steps:

  ## Step 1
  - First, read the user's request and clearly define the goal of the research.
  - Clearly specify the subject in each task plan.
  - Only the tools listed in the "Available Tools Information" below can be used. Social media searches cannot be performed.
  - The Vector DB contains only {vector_db_info}, so use it solely for this purpose. Avoid using the "Vector DB search" without a clear purpose or merely as a precaution, as it would be unnecessary.
  - Consider information from the conversation history when creating the plan. The conversation history includes past interactions between the user and the AI Agent.
  - If, in the previous interaction, an agent asked a question to the user, ensure your plan takes into account both that question and the user's answer.
  - Directly searching using the wording from "User Request" can be an effective approach. Avoid explicitly mentioning tool names with phrases like "using ~".

  ## Step 2
  - Convert the plan into an executable format.
  - If the plan involves searching or investigating, convert it into a format suitable for a search query. The plan will be directly used by the search tool. Avoid explicitly mentioning tool names with phrases like "[using ~]".
    - (Example 1) Before conversion: Web search about ~ => After conversion: Tell me about ~.
    - (Example 2) Before conversion: Investigate ~ => After conversion: Tell me about ~.
    - (Example 3) Before conversion: Search ~ using ~ tool => After conversion: Tell me about ~.

  # User Request
  {rev_request}

  # Available Tools Information
  {tool_info}

  # Constraints
  - You can create a maximum total of {max_plan} plans. Do not exceed this limit. Create concise and efficient plans achievable within this limit. Due to the limited number of plans allowed, ensure each plan is optimal and efficient.
  - Different tasks, such as searches and analyses, must be separated into individual plans, as different tools may be required.
  - It is unnecessary to create a final plan to summarize research results into an answer for the user, as this will be handled separately.
  - Avoid creating duplicate or redundant task plans.

  # Output
  Use JSON format as shown below:
  - `type`: Always set to `"plan"`.
  - `plan`: Specify the task plans (can be multiple) in an array format. Ensure it matches the number of elements in `plan_status`.
  - `plan_status`: Specify the execution status for each plan (can be multiple) in an array format. Since you are currently planning, set all values to `"open"`. Ensure it matches the number of elements in `plan`.
  - Output must be in JSON format. Be careful not to output plain text. Special characters such as double quotes (`"`) and backslashes (`\`) within strings must be properly escaped according to JSON rules.

  Example Output: {{"type": "plan", "plan":["plan1", "plan2"...], "plan_status": ["open", "open"...]}}

  # Conversation History
  {msg_history}

  # Current Date and Time
  {date_time}

create_final_answer: |
  # Instructions
  You are an expert at summarizing documents. Based on the provided research results, clearly summarize the answer to the user's question.
  Refer to the conversation history as well. Particularly, if you have been asked to verify previously researched results, compare earlier answers from this conversation with the provided "Research Results" for verification.
  If URLs to source documents are included in the research results, incorporate them into your response.
  The research results contain information gathered from multiple resources. Be mindful of document boundaries to avoid mixing information from different sources.

  # User Request
  {rev_request}

  # Examples of Document Boundaries
  - In cases such as `{{"title": "***", "content": "***"}}, {{"title": "***", "content": "***"}}`, each JSON object separated by commas represents entirely distinct information.
  - If the document title contains a proper noun, it may not always relate directly to the content. If the relationship is uncertain, avoid directly answering and prompt the user to confirm the source.
  - Sections starting with `"## title"` represent entirely distinct sets of information.

  # Research Results
  {res_history}

  # Conversation History
  {msg_history}

  # Current Date/Time
  {date_time}

judge_replan: |
  # Instructions
  Determine whether the "Research Results" contain relevant information necessary to answer the user's request.
  Output the determination result in JSON format. For the output value, use "yes" if relevant information is included, and "no" if not (lowercase).
  Only output "no" if there is absolutely no information available to answer the user's request. Avoid unnecessarily outputting "no," as this will trigger redundant research and delay the response.
  Include the reason for your determination within the JSON "reason" field.
  The "Conversation History" contains previous interactions between the user and the Agent.
  Output must be in JSON format. Carefully avoid outputting plain text. Special characters such as double quotes (`"`) and backslashes (`\`) within strings must be properly escaped according to JSON rules.

  # User Request
  {rev_request}

  # Research Results
  {res_history}

  # Conversation History
  {msg_history}

  # Example Output: {{"is_included": "yes", "reason": "***"}}

  # Current Date and Time
  {date_time}

create_revised_plan: |
  # Instructions
  You are an expert in creating task plans for research.
  Perform the following two steps:

  ## Step 1
  The previous research was conducted based on the "Previously Created Plan," but the AI Agent concluded with "No answer was found for the question."
  The original plan created by the AI Agent is likely to have room for improvement. After careful reflection, create a new and improved task plan aimed at successfully achieving the user's request.

  ## Step 2
  - Convert the plan into an executable format.
  - If the plan involves searches or investigations, format it appropriately for searches. The resulting plan will be directly passed to the search tool. Avoid explicitly mentioning tool names with expressions like "[using ~]."
    - (Example 1) Before conversion: Investigate ~ or perform a web search for ~ => After conversion: Tell me about ~.
    - (Example 2) Before conversion: Search ~ on the ~ tool => After conversion: Tell me about ~.

  # Constraints
  - You can create a maximum total of {max_plan} plans. Do not exceed this limit. Develop concise and efficient plans achievable within this limit. Since the number of possible plans is limited, ensure each plan is optimal and efficient.
  - Only "Web Search" or "Vector DB Search" can be performed. Social media information searches cannot be conducted.
  - The Vector DB contains only {vector_db_info}; therefore, use it solely for this purpose. Do not perform "Vector DB searches" unnecessarily or "just in case."
  - It is unnecessary to include a plan to summarize research results into a final answer for the user, as this will be handled separately.
  - Do not create any plans identical to the "Previously Created Plan." Instead, ensure plans reflect different approaches.
  - If, in the previous interaction, an agent asked a question to the user, ensure your new plan considers both the agent's question and the user's response.
  - Avoid creating duplicate or redundant task plans.
  - Directly using the wording from the "User Request" can be an effective method for searches.

  # Available Tools Information
  {tool_info}

  # User Request
  {rev_request}

  # Output
  Provide the output in a single-line JSON format as shown in the example below. Carefully avoid outputting plain text. Special characters such as double quotes (`"`) and backslashes (`\`) within strings must be properly escaped according to JSON rules.
  - `type`: Always set to `"plan"`.
  - `plan`: Specify task plans (multiple allowed) in an array format. Ensure it matches the number of elements in `plan_status`.
  - `plan_status`: Specify execution status for each plan (multiple allowed) in an array format. At the planning stage, set all values to `"open"`. Ensure it matches the number of elements in `plan`.
  - Output must be in JSON format. Carefully avoid outputting plain text. Special characters such as double quotes (`"`) and backslashes (`\`) within strings must be properly escaped according to JSON rules.

  # Example Output: {{"type": "plan", "plan":["plan1", "plan2"...], "plan_status": ["open", "open"...]}}

  # Previously Created Plan
  {plan}

  # Current Date/Time
  {date_time}
