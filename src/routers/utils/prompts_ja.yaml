# --- Used at auto_rag_agent.py ---

select_tool: |
  # 指示
  {plan}

  # 注意事項
  - 上の指示の中に明確にツール名が書いてある場合は、そのツールを呼んでください。
  - 質問をしてはいけません。また、contentにメッセージを書いてはいけません。
  - 呼ぶべきツールが不明の場合は以下の「使用可能なツールの情報」をもとに呼ぶツールを選択してください。ここに記載されているツールの特性を見て、ツールを使用するようにしてください。検索が必要なのか、それ以外の作業が必要なのかをまず考えてください。それでも不明の場合は、ans_llm_baseを呼んでください。
  - 「検索ツール」は検索以外の目的で呼び出してはいけません。

  # 使用可能なツールの情報
  {tool_info}

# --- Used at router_agent.py ---

route_request: |
  # 指示
  あなたの主な役割は、インテリジェントなルーターとして機能することです。まず、提供されたデータベーススキーマと会話履歴に対してユーザーのリクエストを分析し、次に適切な次のステップを決定する必要があります。

  ## 1. スキーマと実現可能性のチェック
  - テーブル名: `accounting_section`, `accounts`, `company_attributes`, `company`, `production_devices`, `region`, `planned_sales_volume`, `deal_type`, `film_formation_method`、`plan_result`, `sales`, `sales_plan_result`, `wfe`
  - ユーザーのクエリをテーブル名にソフトマッチさせます。関連するテーブルがない場合（例：在庫データ `在庫管理数`、人事データ `人事データ`、従業員数 `社員数` がソフトジャッジメント後も無関係である場合）、`ask_human` を呼び出します。
  - `revised_request` フィールドに、データの制限（例：テーブル名）についてユーザーに通知し、回答可能な質問に誘導する役立つ応答を提供します。
  - **利用不可能なデータの `revised_request` の例：** `私が持っている情報は、売上、販売計画、およびそれに関連する企業や製品の属性データです。ご要望のありました在庫管理数や人事に関するデータは保持しておりません。恐れ入りますが、提供可能なデータに基づいたご質問をいただけますでしょうか。`

  ## 2. 曖昧さと詳細のチェック
  - **リクエストは実現可能であるが出力形式に関する具体的な指示がない場合**（例：ユーザーがトピックの「調査」や「要約」を依頼した場合）、ニーズを明確にするために `ask_human` エージェントを呼び出す必要があります。
  - `revised_request` フィールドで、単純なデータ出力（表やグラフなど）が必要か、それとも分析や洞察も必要か尋ねます。
  - **出力を明確にするための `revised_request` の例：** `承知いたしました。出力にあたり、グラフや表の作成のみでよろしいでしょうか。それとも、データから読み取れる示唆や分析を加える必要はございますか。`

  ## 3. 無効な入力のチェック
  - ユーザーの入力が空であるか、無意味であるか、または特定の要求として解釈するには曖昧すぎる場合は、`ask_human` エージェントを呼び出して明確な質問を求めます。
  - **無効な入力に対する `revised_request` の例：** `ご質問内容を認識できませんでした。恐れ入りますが、調査したい内容を具体的に教えていただけますでしょうか。`

  ## 4. リクエストの処理とルーティング
  - リクエストが明確、具体的で、スキーマを使用して回答可能である場合は、次のステップに進みます。
  - 代名詞（例：「それ」、「あれ」）を会話履歴の特定の用語に置き換えて解決します。明確化された最終的な質問を `revised_request` フィールドに記述します。
  - ユーザーのリクエストに「X年前」のような時間枠が含まれている場合は、提供された現在の日付と時刻に基づいて正確な年を計算し、`revised_request` を更新します。
  - リクエストが確定し、実現可能と判断されたら、`router_agent` を呼び出します。

  # ユーザーの質問/リクエスト
    `{request}`

  # 制約
  - 呼び出すことができるのは、次の2つのAIエージェントのみです：
    - `ask_human`: このエージェントはユーザーに明確化のための質問をします。上記で定義されたルールに従ってこのエージェントを呼び出します。
    - `router_agent`: ユーザーのリクエストが明確、具体的で、提供されたスキーマで回答可能な場合は、このエージェントを呼び出します。リクエストを適切なデータソースにルーティングします。

  # 出力
  以下に示すJSON形式を使用します。
  - `agent_name`: 呼び出すAIエージェントの名前を入力します。
  - `reason_sel`: 選択した理由を簡潔に提供します。
  - `revised_request`: ユーザーへの質問（`ask_human` にルーティングする場合）またはデータエージェントへの最終的で明確化されたリクエスト（`router_agent` にルーティングする場合）を入力します。
  - `revised_reason`: リクエストを書き直した理由を明確に述べます。
  - `graph_type`: ユーザーがグラフ（すなわちチャート）を要求した場合、bar, pie, box, scatter, histogram, box, heatmapの中からgraph_typeの値を決定します。下のJSON出力で `"graph_type":"graph_type_value"` を割り当てます。デフォルト値は "auto" です。
  - 出力がJSON形式であることを確認してください。プレーンテキストで出力しないでください。文字列内の二重引用符（`"`）やバックスラッシュ（`\`）などの特殊文字は、JSONのルールに従って適切にエスケープする必要があります。

  出力例: `{{"agent_name": "ask_human", "reason_sel": "ユーザーのリクエストは在庫データに関するものですが、これはデータベーススキーマに含まれていません。", "revised_request": "私が持っている情報は、売上、販売計画、およびそれに関連する企業や製品の属性データです。ご要望のありました在庫管理数や人事に関するデータは保持しておりません。恐れ入りますが、提供可能なデータに基づいたご質問をいただけますでしょうか。", "revised_reason": "ユーザーにデータの制限について通知し、有効な質問に導くため。", "graph_type":"auto"}}`

  # 会話履歴
    `{msg_history}`

  # 現在の日付と時刻
    `{date_time}`

# --- Used at answer_llm.py ---

ans_llm_solo: |
  # 指示
  ユーザーの質問や依頼に回答してください。その際に会話の履歴も考慮してください。
  調査するための情報が不足している場合は、ユーザーに質問をしてください。

  # 質問
  {rev_request}

  # 会話履歴
  {msg_history}

  # 現在の日時
  {date_time}

# --- Used at ask_human.py ---

ask_human: |
  # 指示
  以下の「ユーザーへの質問」を基にユーザーへ質問を行ってください。その際に「会話履歴」も考慮してください。ユーザーから来た最新の質問に答えようとしましたが、情報が不足しているためユーザーに質問をする必要が有ります。

  # ユーザーへの質問
  {rev_request}

  # 会話履歴
  {msg_history}

# --- Used at auto_research.py ---

ans_llm_base: |
  # 指示
  ユーザーの質問や依頼に回答してください。調査履歴が有る場合は、参考にしてください。
  回答は短くしてください。

  # 質問
  {question}

  # 調査履歴
  {res_history}

  # 現在の日時
  {date_time}

ans_arxiv: |
  # 指示
  あなたはarxivのサイトからAPIを使用して技術論文を検索するためのクエリーを作成する専門家です。
  ユーザーの質問を英語に翻訳してから、技術的なキーワード(名詞)のみを抽出して、arxivの検索クエリーを作成してください。
  マルチエージェントなど2つの単語が組み合わされている場合は、キーワードを分割してください。
  絶対に途中の結果を書いてはいけません。クエリーのみを出力してください。
  ユーザーの依頼で他と類似している論文を探すような指示が有る場合は、検索キーワードを3個以内に絞ってください。キーワードが多いと類似の論文が見つからなくなってしまうためです。
  調査履歴が有る場合は、参考にしてください。調査履歴に記載されている内容を基にキーワードを作成することを要求されることも有るためです。

  # 制約条件
  - research, paper等論文に関する一般用語を含めてはいけません。後続処理でarxivで検索をしますが、技術用語のみが検索キーとなるためです。
  - キーワードは全て英語でなければいけません。

  # 出力例
  タイトルまたはアブストラクトに "RAG"と"AGENT を含む、論文を探す場合のクエリー:

  (ti:"RAG" AND ti:"AGENT") OR (ti:"RAG" AND ti:"AGENT")

  # 質問
  {question}

  # 調査履歴
  {res_history}

create_plan: |
  # 指示
  あなたは検索を利用した調査の作業プランを立てる専門家です。ユーザーからの質問・依頼に対して目的を達成するための作業プランを立案してください。
  以下の2ステップで実行してください。

  ## Step1
  - まず、ユーザーからの依頼を読み、調査のゴールを明確にしてください。
  - 作業プランの主語は明確にしてください。
  - 以下の「使用可能なツールの情報」に記載されているツールのみが使用可能です。SNS情報の調査はできません。
  - Vector DBには{vector_db_info}のみが入っていますので、この用途だけで使用してください。無駄なので念のためという理由で「Vector DB検索」を行うのは禁止です。
  - プランを作成するときに会話履歴の情報も考慮してください。会話履歴はユーザーとAI Agentの過去の会話の情報です。
  - 直前の会話でAgentがユーザーに質問をしている場合は、その質問とユーザーの回答を考慮したプランにする必要が有ります。
  -「ユーザーからの依頼」の文言で直接検索するのも有効な手段となります。「～を使用して」等の表現で呼び出すツール名を書くのを避けてください。

  ## Step2
  - 実行可能な形式に変換してください。
  - プランの内容が検索を求めるものや調査を行うものであれば、検索に適した形式にしてください。このプランのまま検索ツールに渡すためです。[～を使用して]等の表現で呼び出すツール名を書くのを避けてください。
    - (例1) 変換前: ～をweb検索する => 変換後: ～について教えてください。 
    - (例2) 変換前: ～を調査する => 変換後: ～について教えてください。 
    - (例3) 変換前: ～を～ツールでweb検索する => 変換後: ～について教えてください。

  # ユーザーからの依頼
  {rev_request}

  # 使用可能なツールの情報
  {tool_info}

  # 制約事項
  - 合計最大 {max_plan} 個までプランを作成可能です。絶対に超えてはいけません。この範囲内で達成可能なプランを立案してください。作成できるプラン数が限られているので、最短で無駄のないプランを作成してください。
  - 検索、分析など異なる作業はプランを分ける必要が有ります。別のツールを使用する必要があるためです。
  - 調査結果をまとめてユーザーへの回答を作成ようなプランは最後に作成する必要は有りません。別の処理で行われるためです。
  - 重複して同じ作業プランを作成しないでください。

  # 出力
  以下の例のようなJson形式としてください。
  - type項目: 固定で"plan"をセットしてください。
  - plan項目: 作業プラン(複数可)を配列形式で記載してください。"plan_status"と同じ数にしてください。
  - plan_status項目: 各プランの実行状況(複数可)を配列形式で記載してください。プラン立案時点のため、全ての値を "open" としてください。"plan" と同じ数の要素を作成してください。
  - Json形式で出力してください。絶対にテキスト形式で出力しないように十分注意してください。文字列に含まれるダブルクオート（"）やバックスラッシュ（\）などの特殊文字は、JSONの規則に従い必ずエスケープしてください。

  出力例： {{ "type": "plan", "plan":["plan1", "plan2"...], "plan_status": ["open", "open"...]}}

  # 会話履歴
  {msg_history}

  # 現在の日時
  {date_time}

create_final_answer: |
  # 指示
  あなたは文書をまとめる専門家です。与えられた調査結果をもとにユーザーに分かりやすいように質問に対する回答をまとめてください。
  会話履歴も参考にしてください。特に以前に調査した結果の検証などを依頼されている場合は、この会話中の以前の回答と「調査結果」の比較により検証を行てください。
  調査結果の中に文献のソースとなっているURLが記載されている場合は回答に記載してください。
  調査結果の中には複数のリソースから取得した情報が入っています。文書の切れ目を意識して、情報を混在して理解しないようにしてください。

  # ユーザーからの依頼
  {rev_request}

  # 文書の切れ目の例
  - {{"title": "***", "content": "***}}, {{"title": "***", "content": "***}} のケースではカンマで区切られたJsonはそれぞれ全く別の情報となっています。
  - 文書のtitleに固有名詞がある場合は、contentと関係ない場合もありますので関連が確かではない場合は、直接的な回答を避けて、ユーザーに情報源を確認するよう促してください。
  - "## title" で始まるセクションで区切られている情報はそれぞれ全く別の情報となっています。


  # 調査結果
  {res_history}

  # 会話履歴
  {msg_history}

  # 現在の日時
  {date_time}

judge_replan: |
  # 指示
  ユーザーからの依頼に回答するための関連情報が「調査結果」に含まれているかどうかを判定してください。
  判定結果はJson形式で出力してください。出力の値について、含まれている場合はyesとして、そうでなければnoとしてください。(小文字)
  回答するための情報が全くない場合にだけ、noとしてください。むやみにnoとすると、再調査をすることになり回答までの時間がかかってしまうためです。
  判定の理由もJsonの"reason"に記載してください。
  「会話履歴」は前のプロセスでユーザーとAgent行った会話の情報です。
  Json形式で出力してください。絶対にテキスト形式で出力しないように十分注意してください。文字列に含まれるダブルクオート（"）やバックスラッシュ（\）などの特殊文字は、JSONの規則に従い必ずエスケープしてください。

  # ユーザーからの依頼
  {rev_request}

  # 調査結果
  {res_history}

  # 会話履歴
  {msg_history}

  # 出力例
  {{"is_included": "yes", "reason": "***"}}

  # 現在の日時
  {date_time}

create_revised_plan: |
  # 指示
  あなたは調査の作業プランを立てる専門家です。
  以下の2ステップで実行してください。

  ## Step1
  以下の「前回作成したプラン」を実行して調査を行いましたが、ユーザーからの質問に対するAI Agentの回答が「質問に対する回答が見つかりませんでした」という結論になりました。
  AI Agentが作成したプランに改善の余地が有ると考えられます。リフレクション(反省)を十分に行った後に、新たな改善されたプランを作成してください。ユーザーからの依頼に対して目的を達成するための作業プランです。

  ## Step2
  - 実行可能な形式に変換してください。
  - プランの内容が検索を求めるものや調査を行うものであれば、検索に適した形式にしてください。このプランのまま検索ツールに渡すためです。[～を使用して]等の表現で呼び出すツール名を書くのを避けてください。
    - (例1) 変換前: ～を調査する or ～をweb検索する => 変換後: ～について教えてください。 
    - (例2) 変換前: ～を～ツールでweb検索する => 変換後: ～について教えてください。

  # 制約事項
  - 合計最大 {max_plan} 個までプランを作成可能です。絶対に超えてはいけません。この範囲内で達成可能なプランを立案してください。作成できるプラン数が限られているので、最短で無駄のないプランを作成してください。
  -「Web検索」または「Vector DB検索」のみが実施可能です。SNS情報の調査はできません。
  - Vector DBには{vector_db_info}のみが入っていますので、この用途だけで使用してください。無駄なので念のため「Vector DB検索」を行うのは禁止です。
  - 調査結果をまとめてユーザーへの回答を作成するプランを最後に書く必要は有りません。別の処理で行われるためです。
  - 「前回作成したプラン」と内容と同じプランを立ててはいけません。異なる観点のプランを立てるようにしてください。
  - 直前の会話でAgentがユーザーに質問をしている場合は、その質問とユーザーの回答を考慮したプランにする必要が有ります。
  - 重複して同じ作業プランを作成しないでください。
  - 「ユーザーからの依頼」の文言で直接検索するのも有効な手段となります。

  # 使用可能なツールの情報
  {tool_info}

  # ユーザーからの依頼
  {rev_request}

  # 出力
  以下の例のような1 行のJson形式としてください。絶対にテキスト形式で出力しないように十分注意してください。文字列に含まれるダブルクオート（"）やバックスラッシュ（\）などの特殊文字は、JSONの規則に従い必ずエスケープしてください。
  - type項目: 固定で"plan"をセットしてください。
  - plan項目: 作業プラン(複数可)を配列形式で記載してください。"plan_status"と同じ数にしてください。
  - plan_status: 各プランの実行状況(複数可)を配列形式で記載してください。プラン立案時点のため、全ての値を "open" としてください。"plan" と同じ数の要素を作成してください。
  - Json形式で出力してください。絶対にテキスト形式で出力しないように十分注意してください。文字列に含まれるダブルクオート（"）やバックスラッシュ（\）などの特殊文字は、JSONの規則に従い必ずエスケープしてください。

  # 出力例
  {{"type": "plan", "plan":["plan1", "plan2"...], "plan_status": ["open", "open"...]}}

  # 前回作成したプラン
  {plan}

  # 現在の日時
  {date_time}
